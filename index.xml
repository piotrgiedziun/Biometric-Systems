<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Biometric Systems</title><link>https://piotrgiedziun.github.io/biometric-systems/</link><description>Recent content on Biometric Systems</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://piotrgiedziun.github.io/biometric-systems/index.xml" rel="self" type="application/rss+xml"/><item><title>Lab 1</title><link>https://piotrgiedziun.github.io/biometric-systems/docs/labs/intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://piotrgiedziun.github.io/biometric-systems/docs/labs/intro/</guid><description>Introduction # Introduction to Machine Learning and Python - required to complete the course.
Pre-read (Required) # https://www.kaggle.com/learn/python (Lessons 1-6) https://www.kaggle.com/learn/intro-to-deep-learning (Lessons 1-3) https://www.kaggle.com/learn/computer-vision (Lessons 1-4) Literature (Optional) # Christopher M. Bishop. (2007). Pattern Recognition and Machine Learning Sebastian Raschka (2019). Python Machine Learning: Machine Learning and Deep Learning with Python John M. Zelle, Guido van Rossum. (2016). Python Programming: An Introduction to Computer Science MNIST Demo # // Variables for referencing the canvas and 2dcanvas context var canvas, ctx; // Variables to keep track of the mouse position and left-button status var mouseX, mouseY, mouseDown = 0; // Variables to keep track of the touch position var touchX, touchY; // Keep track of the old/last position when drawing a line // We set it to -1 at the start to indicate that we don't have a good value for it yet var lastX, lastY = -1; // Draws a line between the specified position on the supplied canvas name // Parameters are: A canvas context, the x position, the y position, the size of the dot function drawLine(ctx, x, y, size) { // If lastX is not set, set lastX and lastY to the current position if (lastX == -1) { lastX = x; lastY = y; } // Let's use black by setting RGB values to 0, and 255 alpha (completely opaque) r = 255; g = 255; b = 255; a = 255; // Select a fill style ctx.</description></item></channel></rss>